#!/usr/bin/env python
# coding: utf-8

# In[1]:


#import required libraries
import pandas as pd
import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn import metrics


# In[2]:


car_data = pd.read_csv('/Users/phamlethuylinh/Desktop/car data.csv')


# In[3]:


car_data.head()


# In[4]:


car_data.info()


# In[5]:


car_data.isnull().sum()


# In[6]:


car_data.describe()


# In[9]:


print(car_data["Fuel_Type"].value_counts())


# In[10]:


print(car_data["Seller_Type"].value_counts())
print(car_data["Transmission"].value_counts())


# In[11]:


fuel_type = car_data["Fuel_Type"]
seller_type = car_data["Seller_Type"]
transmission = car_data["Transmission"]
selling_price = car_data["Selling_Price"]


# In[14]:


from matplotlib import style


# In[25]:


style.use('ggplot')
fig = plt.figure(figsize = (15,5))
fig.suptitle("Visualizing categorical data columns")
plt.subplot(1,3,1)
plt.bar(fuel_type, selling_price, color = 'royalblue')
plt.xlabel("Fuel_Type")
plt.ylabel ("Selling_Price")
plt.subplot(1,3,2)
plt.bar(seller_type, selling_price, color = 'red')
plt.xlabel("Seller Type")
plt.subplot(1,3,3)
plt.bar(transmission, selling_price, color = 'purple')
plt.xlabel("Transmission Type")
plt.show()


# In[27]:


fig, axes = plt.subplots(1, 3, figsize = (15,5), sharey = True)
fig.suptitle("Visualizing categorical columns")
sns.barplot(x = fuel_type, y=selling_price, ax=axes[0])
sns.barplot(x = seller_type, y=selling_price, ax=axes[1])
sns.barplot(x = transmission, y=selling_price, ax=axes[2])


# In[29]:


petrol_data = car_data.groupby("Seller_Type").get_group("Dealer")
petrol_data.describe()


# In[30]:


#manual_encoding
car_data.replace({"Fuel_Type":{"Petrol":0, "Diesel":1, "CNG":2}},inplace = True)
#one_hot_encoding
car_data = pd.get_dummies(car_data, columns = ["Seller_Type", "Transmission"], drop_first = True)


# In[31]:


car_data.head()


# In[34]:


plt.figure(figsize=(10,7))
sns.heatmap(car_data.corr(), annot = True)
plt.title("Correlation between the columns")
plt.show()


# In[35]:


fig = plt.figure(figsize = (7,5))
plt.title("Correlation between present price and selling price")
sns.regplot(x = "Present_Price", y = "Selling_Price", data = car_data)


# In[37]:


x = car_data.drop(['Car_Name','Selling_Price'], axis = 1)
y = car_data["Selling_Price"]


# In[38]:


print("Shape of x is: ", x.shape)
print("Shape of y is: ", y.shape)


# In[39]:


x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 50)
print("X_test_shape: ", x_test.shape)
print("X_train_shape: ", x_train.shape)
print("Y_test_shape: ", y_test.shape)
print("Y_train_shape: ", y_train.shape)


# In[40]:


scaler = StandardScaler()


# In[42]:


X_train = scaler.fit_transform(x_train)
X_test= scaler.transform(x_test)


# In[43]:


model= LinearRegression()


# In[44]:


model.fit(x_train, y_train)


# In[45]:


pred = model.predict(x_test)


# In[46]:


from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score


# In[47]:


print("MAE: ", (metrics.mean_absolute_error(pred, y_test)))
print("MSE: ", (metrics.mean_squared_error(pred, y_test)))
print("R2: ", (metrics.r2_score(pred, y_test)))


# In[48]:


sns.regplot(x=pred, y=y_test)
plt.xlabel("Predicted Price")
plt.ylabel("Actual Price")
plt.title("Actual vs Predicted Price")
plt.show()


# In[ ]:




